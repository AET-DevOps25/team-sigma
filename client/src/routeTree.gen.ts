/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AuthedIndexRouteImport } from './routes/_authed/index'
import { Route as AuthedApiDemoRouteImport } from './routes/_authed/api-demo'
import { Route as AuthedDocumentIndexRouteImport } from './routes/_authed/document/index'
import { Route as AuthedSlideSlideIdRouteImport } from './routes/_authed/slide.$slideId'
import { Route as AuthedDocumentsLectureIdRouteImport } from './routes/_authed/documents/$lectureId'

const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedIndexRoute = AuthedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedApiDemoRoute = AuthedApiDemoRouteImport.update({
  id: '/api-demo',
  path: '/api-demo',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedDocumentIndexRoute = AuthedDocumentIndexRouteImport.update({
  id: '/document/',
  path: '/document/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedSlideSlideIdRoute = AuthedSlideSlideIdRouteImport.update({
  id: '/slide/$slideId',
  path: '/slide/$slideId',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedDocumentsLectureIdRoute =
  AuthedDocumentsLectureIdRouteImport.update({
    id: '/documents/$lectureId',
    path: '/documents/$lectureId',
    getParentRoute: () => AuthedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/api-demo': typeof AuthedApiDemoRoute
  '/': typeof AuthedIndexRoute
  '/login': typeof LoginIndexRoute
  '/documents/$lectureId': typeof AuthedDocumentsLectureIdRoute
  '/slide/$slideId': typeof AuthedSlideSlideIdRoute
  '/document': typeof AuthedDocumentIndexRoute
}
export interface FileRoutesByTo {
  '/api-demo': typeof AuthedApiDemoRoute
  '/': typeof AuthedIndexRoute
  '/login': typeof LoginIndexRoute
  '/documents/$lectureId': typeof AuthedDocumentsLectureIdRoute
  '/slide/$slideId': typeof AuthedSlideSlideIdRoute
  '/document': typeof AuthedDocumentIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/api-demo': typeof AuthedApiDemoRoute
  '/_authed/': typeof AuthedIndexRoute
  '/login/': typeof LoginIndexRoute
  '/_authed/documents/$lectureId': typeof AuthedDocumentsLectureIdRoute
  '/_authed/slide/$slideId': typeof AuthedSlideSlideIdRoute
  '/_authed/document/': typeof AuthedDocumentIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/api-demo'
    | '/'
    | '/login'
    | '/documents/$lectureId'
    | '/slide/$slideId'
    | '/document'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/api-demo'
    | '/'
    | '/login'
    | '/documents/$lectureId'
    | '/slide/$slideId'
    | '/document'
  id:
    | '__root__'
    | '/_authed'
    | '/_authed/api-demo'
    | '/_authed/'
    | '/login/'
    | '/_authed/documents/$lectureId'
    | '/_authed/slide/$slideId'
    | '/_authed/document/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/api-demo': {
      id: '/_authed/api-demo'
      path: '/api-demo'
      fullPath: '/api-demo'
      preLoaderRoute: typeof AuthedApiDemoRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/document/': {
      id: '/_authed/document/'
      path: '/document'
      fullPath: '/document'
      preLoaderRoute: typeof AuthedDocumentIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/slide/$slideId': {
      id: '/_authed/slide/$slideId'
      path: '/slide/$slideId'
      fullPath: '/slide/$slideId'
      preLoaderRoute: typeof AuthedSlideSlideIdRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/documents/$lectureId': {
      id: '/_authed/documents/$lectureId'
      path: '/documents/$lectureId'
      fullPath: '/documents/$lectureId'
      preLoaderRoute: typeof AuthedDocumentsLectureIdRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}

interface AuthedRouteChildren {
  AuthedApiDemoRoute: typeof AuthedApiDemoRoute
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedDocumentsLectureIdRoute: typeof AuthedDocumentsLectureIdRoute
  AuthedSlideSlideIdRoute: typeof AuthedSlideSlideIdRoute
  AuthedDocumentIndexRoute: typeof AuthedDocumentIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedApiDemoRoute: AuthedApiDemoRoute,
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedDocumentsLectureIdRoute: AuthedDocumentsLectureIdRoute,
  AuthedSlideSlideIdRoute: AuthedSlideSlideIdRoute,
  AuthedDocumentIndexRoute: AuthedDocumentIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
