/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as AuthedSlideSlideIdImport } from './routes/_authed/slide.$slideId'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSlideSlideIdRoute = AuthedSlideSlideIdImport.update({
  id: '/slide/$slideId',
  path: '/slide/$slideId',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed/slide/$slideId': {
      id: '/_authed/slide/$slideId'
      path: '/slide/$slideId'
      fullPath: '/slide/$slideId'
      preLoaderRoute: typeof AuthedSlideSlideIdImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedSlideSlideIdRoute: typeof AuthedSlideSlideIdRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedSlideSlideIdRoute: AuthedSlideSlideIdRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/': typeof AuthedIndexRoute
  '/login': typeof LoginIndexRoute
  '/slide/$slideId': typeof AuthedSlideSlideIdRoute
}

export interface FileRoutesByTo {
  '/': typeof AuthedIndexRoute
  '/login': typeof LoginIndexRoute
  '/slide/$slideId': typeof AuthedSlideSlideIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/': typeof AuthedIndexRoute
  '/login/': typeof LoginIndexRoute
  '/_authed/slide/$slideId': typeof AuthedSlideSlideIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/login' | '/slide/$slideId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/slide/$slideId'
  id:
    | '__root__'
    | '/_authed'
    | '/_authed/'
    | '/login/'
    | '/_authed/slide/$slideId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/login/"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/",
        "/_authed/slide/$slideId"
      ]
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/_authed/slide/$slideId": {
      "filePath": "_authed/slide.$slideId.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
