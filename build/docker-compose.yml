services:
  eureka:
    build:
      context: ../server/eureka
    ports:
      - "8761:8761"
    environment:
      - SPRING_APPLICATION_NAME=eureka
      - SERVER_PORT=8761
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    networks:
      - spring-cloud-network

  api-gateway:
    build:
      context: ../server/api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_APPLICATION_NAME=api-gateway
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
    depends_on:
      - eureka
    networks:
      - client-network
      - spring-cloud-network

  document-service:
    build:
      context: ../server/document-service
    environment:
      - SPRING_APPLICATION_NAME=document-service
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - WEAVIATE_URL=weaviate:8080
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=document_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - eureka
      - weaviate
      - minio
      - postgres
    networks:
      - spring-cloud-network

  chat-service:
    build:
      context: ../server/chat-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_APPLICATION_NAME=chat-service
      - SERVER_PORT=8082
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - ENVIRONMENT=docker
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - eureka
      - document-service
    networks:
      - spring-cloud-network

  lecture-service:
    build:
      context: ../server/lecture-service
    environment:
      - SPRING_APPLICATION_NAME=lecture-service
      - SERVER_PORT=8083
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=lecture_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      - eureka
      - postgres
    networks:
      - spring-cloud-network

  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:stable-v1.31-9900730
    ports:
      - "8090:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=text2vec-openai
      - ENABLE_MODULES=text2vec-openai,generative-openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_APIKEY=${OPENAI_API_KEY}
      - CLUSTER_HOSTNAME=node1
    volumes:
      - ./data/weaviate:/var/lib/weaviate
    networks:
      - spring-cloud-network

  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    networks:
      - spring-cloud-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./config/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - spring-cloud-network

  client:
    build:
      context: ../client
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - client-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=1GB'
    networks:
      - spring-cloud-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=error
      - GF_INSTALL_PLUGINS=
    depends_on:
      - prometheus
    networks:
      - spring-cloud-network

networks:
  client-network:
    driver: bridge

  spring-cloud-network:
    driver: bridge